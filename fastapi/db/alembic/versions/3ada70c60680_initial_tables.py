"""Initial Tables

Revision ID: 3ada70c60680
Revises: 
Create Date: 2024-08-30 15:48:36.496930

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = "3ada70c60680"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "departments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("acronym", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "environment_code",
            sqlmodel.sql.sqltypes.AutoString(length=2),
            nullable=False,
        ),
        sa.Column("cio_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("cio_email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("cloud_dg_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("cloud_dg_email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("aom_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("aom_email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "client_exec_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "client_exec_email", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("sdm_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("sdm_email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("is_science", sa.Boolean(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_departments_is_deleted"), "departments", ["is_deleted"], unique=False
    )
    op.create_index(
        op.f("ix_departments_is_science"), "departments", ["is_science"], unique=False
    )
    op.create_table(
        "experiment_areaofscience",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_experiment_areaofscience_is_deleted"),
        "experiment_areaofscience",
        ["is_deleted"],
        unique=False,
    )
    op.create_table(
        "experiment_datasensitivity",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_experiment_datasensitivity_is_deleted"),
        "experiment_datasensitivity",
        ["is_deleted"],
        unique=False,
    )
    op.create_table(
        "experiment_fundingsource",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name_short", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_experiment_fundingsource_is_deleted"),
        "experiment_fundingsource",
        ["is_deleted"],
        unique=False,
    )
    op.create_table(
        "experiment_levelofeffort",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_experiment_levelofeffort_is_deleted"),
        "experiment_levelofeffort",
        ["is_deleted"],
        unique=False,
    )
    op.create_table(
        "experiment_statuses",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_experiment_statuses_is_deleted"),
        "experiment_statuses",
        ["is_deleted"],
        unique=False,
    )
    op.create_table(
        "experiment_tags",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_experiment_tags_is_deleted"),
        "experiment_tags",
        ["is_deleted"],
        unique=False,
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name_first", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name_last", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("phone", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("sbda", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("notes", sa.TEXT(), nullable=True),
        sa.Column("is_legoteam", sa.Boolean(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["sbda"],
            ["departments.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_is_deleted"), "users", ["is_deleted"], unique=False)
    op.create_index(
        op.f("ix_users_is_legoteam"), "users", ["is_legoteam"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_is_legoteam"), table_name="users")
    op.drop_index(op.f("ix_users_is_deleted"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_experiment_tags_is_deleted"), table_name="experiment_tags")
    op.drop_table("experiment_tags")
    op.drop_index(
        op.f("ix_experiment_statuses_is_deleted"), table_name="experiment_statuses"
    )
    op.drop_table("experiment_statuses")
    op.drop_index(
        op.f("ix_experiment_levelofeffort_is_deleted"),
        table_name="experiment_levelofeffort",
    )
    op.drop_table("experiment_levelofeffort")
    op.drop_index(
        op.f("ix_experiment_fundingsource_is_deleted"),
        table_name="experiment_fundingsource",
    )
    op.drop_table("experiment_fundingsource")
    op.drop_index(
        op.f("ix_experiment_datasensitivity_is_deleted"),
        table_name="experiment_datasensitivity",
    )
    op.drop_table("experiment_datasensitivity")
    op.drop_index(
        op.f("ix_experiment_areaofscience_is_deleted"),
        table_name="experiment_areaofscience",
    )
    op.drop_table("experiment_areaofscience")
    op.drop_index(op.f("ix_departments_is_science"), table_name="departments")
    op.drop_index(op.f("ix_departments_is_deleted"), table_name="departments")
    op.drop_table("departments")
    # ### end Alembic commands ###
